{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Will\\\\Desktop\\\\Twitter-4-employers\\\\client\\\\src\\\\components\\\\Profile\\\\UploadPic.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport FileBase from 'react-file-base64';\nimport { storage } from './firebase-config';\nimport DefaultImg from './assets/default-img.jpg'; // base api url being used\n\nconst API_URL = \"http://localhost:9890\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      multerImage: DefaultImg,\n      firebaseImage: DefaultImg,\n      baseImage: DefaultImg\n    };\n  }\n\n  setDefaultImage(uploadType) {\n    if (uploadType === \"multer\") {\n      this.setState({\n        multerImage: DefaultImg\n      });\n    } else if (uploadType === \"firebase\") {\n      this.setState({\n        firebaseImage: DefaultImg\n      });\n    } else {\n      this.setState({\n        baseImage: DefaultImg\n      });\n    }\n  } // function to upload image once it has been captured\n  // includes multer and firebase methods\n\n\n  uploadImage(e, method) {\n    let imageObj = {};\n\n    if (method === \"multer\") {\n      let imageFormObj = new FormData();\n      imageFormObj.append(\"imageName\", \"multer-image-\" + Date.now());\n      imageFormObj.append(\"imageData\", e.target.files[0]); // stores a readable instance of \n      // the image being uploaded using multer\n\n      this.setState({\n        multerImage: URL.createObjectURL(e.target.files[0])\n      });\n      axios.post(`${API_URL}/image/uploadmulter`, imageFormObj).then(data => {\n        if (data.data.success) {\n          alert(\"Image has been successfully uploaded using multer\");\n          this.setDefaultImage(\"multer\");\n        }\n      }).catch(err => {\n        alert(\"Error while uploading image using multer\");\n        this.setDefaultImage(\"multer\");\n      });\n    } else if (method === \"firebase\") {\n      let currentImageName = \"firebase-image-\" + Date.now();\n      let uploadImage = storage.ref(`images/${currentImageName}`).put(e.target.files[0]);\n      uploadImage.on('state_changed', snapshot => {}, error => {\n        alert(error);\n      }, () => {\n        storage.ref('images').child(currentImageName).getDownloadURL().then(url => {\n          this.setState({\n            firebaseImage: url\n          }); // store image object in the database\n\n          imageObj = {\n            imageName: currentImageName,\n            imageData: url\n          };\n          axios.post(`${API_URL}/image/uploadbase`, imageObj).then(data => {\n            if (data.data.success) {\n              alert(\"Image has been successfully uploaded using firebase storage\");\n              this.setDefaultImage(\"firebase\");\n            }\n          }).catch(err => {\n            alert(\"Error while uploading image using firebase storage\");\n            this.setDefaultImage(\"firebase\");\n          });\n        });\n      });\n    }\n  } // function to capture base64 format of an image\n\n\n  getBaseFile(files) {\n    // create a local readable base64 instance of an image\n    this.setState({\n      baseImage: files.base64\n    });\n    let imageObj = {\n      imageName: \"base-image-\" + Date.now(),\n      imageData: files.base64.toString()\n    };\n    axios.post(`${API_URL}/image/uploadbase`, imageObj).then(data => {\n      if (data.data.success) {\n        alert(\"Image has been successfully uploaded using base64 format\");\n        this.setDefaultImage(\"base\");\n      }\n    }).catch(err => {\n      alert(\"Error while uploading image using base64 format\");\n      this.setDefaultImage(\"base\");\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"main-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Image Upload App\"), React.createElement(\"div\", {\n      className: \"image-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"process\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"process__heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Process: Using Multer\"), React.createElement(\"p\", {\n      className: \"process__details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Upload image to a node server, connected to a MongoDB database, with the help of multer\"), React.createElement(\"input\", {\n      type: \"file\",\n      className: \"process__upload-btn\",\n      onChange: e => this.uploadImage(e, \"multer\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: this.state.multerImage,\n      alt: \"upload-image\",\n      className: \"process__image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"h4\", {\n      className: \"process__heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Process: Using Base64\"), React.createElement(\"p\", {\n      className: \"process__details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Upload image as Base64 directly to MongoDB database\"), React.createElement(\"div\", {\n      className: \"process__upload-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(FileBase, {\n      type: \"file\",\n      multiple: false,\n      onDone: this.getBaseFile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), React.createElement(\"img\", {\n      src: this.state.baseImage,\n      alt: \"upload-image\",\n      className: \"process__image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: \"main-credit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Created by \", React.createElement(\"a\", {\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Tarique Ejaz\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Will/Desktop/Twitter-4-employers/client/src/components/Profile/UploadPic.js"],"names":["React","Component","axios","FileBase","storage","DefaultImg","API_URL","App","constructor","props","state","multerImage","firebaseImage","baseImage","setDefaultImage","uploadType","setState","uploadImage","e","method","imageObj","imageFormObj","FormData","append","Date","now","target","files","URL","createObjectURL","post","then","data","success","alert","catch","err","currentImageName","ref","put","on","snapshot","error","child","getDownloadURL","url","imageName","imageData","getBaseFile","base64","toString","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport FileBase from 'react-file-base64';\r\nimport { storage } from './firebase-config';\r\nimport DefaultImg from './assets/default-img.jpg';\r\n\r\n// base api url being used\r\nconst API_URL = \"http://localhost:9890\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      multerImage: DefaultImg,\r\n      firebaseImage: DefaultImg,\r\n      baseImage: DefaultImg\r\n    }\r\n  }\r\n\r\n  setDefaultImage(uploadType) {\r\n    if (uploadType === \"multer\") {\r\n      this.setState({\r\n        multerImage: DefaultImg\r\n      });\r\n    } else if (uploadType === \"firebase\") {\r\n      this.setState({\r\n        firebaseImage: DefaultImg\r\n      });\r\n    } else {\r\n      this.setState({\r\n        baseImage: DefaultImg\r\n      });\r\n    }\r\n  }\r\n\r\n  // function to upload image once it has been captured\r\n  // includes multer and firebase methods\r\n  uploadImage(e, method) {\r\n    let imageObj = {};\r\n\r\n    if (method === \"multer\") {\r\n\r\n      let imageFormObj = new FormData();\r\n\r\n      imageFormObj.append(\"imageName\", \"multer-image-\" + Date.now());\r\n      imageFormObj.append(\"imageData\", e.target.files[0]);\r\n\r\n      // stores a readable instance of \r\n      // the image being uploaded using multer\r\n      this.setState({\r\n        multerImage: URL.createObjectURL(e.target.files[0])\r\n      });\r\n\r\n      axios.post(`${API_URL}/image/uploadmulter`, imageFormObj)\r\n        .then((data) => {\r\n          if (data.data.success) {\r\n            alert(\"Image has been successfully uploaded using multer\");\r\n            this.setDefaultImage(\"multer\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          alert(\"Error while uploading image using multer\");\r\n          this.setDefaultImage(\"multer\");\r\n        });\r\n    } else if (method === \"firebase\") {\r\n      let currentImageName = \"firebase-image-\" + Date.now();\r\n\r\n      let uploadImage = storage.ref(`images/${currentImageName}`).put(e.target.files[0]);\r\n\r\n      uploadImage.on('state_changed',\r\n        (snapshot) => { },\r\n        (error) => {\r\n          alert(error);\r\n        },\r\n        () => {\r\n          storage.ref('images').child(currentImageName).getDownloadURL().then(url => {\r\n\r\n            this.setState({\r\n              firebaseImage: url\r\n            });\r\n\r\n            // store image object in the database\r\n            imageObj = {\r\n              imageName: currentImageName,\r\n              imageData: url\r\n            };\r\n\r\n            axios.post(`${API_URL}/image/uploadbase`, imageObj)\r\n              .then((data) => {\r\n                if (data.data.success) {\r\n                  alert(\"Image has been successfully uploaded using firebase storage\");\r\n                  this.setDefaultImage(\"firebase\");\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                alert(\"Error while uploading image using firebase storage\")\r\n                this.setDefaultImage(\"firebase\");\r\n              });\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  // function to capture base64 format of an image\r\n  getBaseFile(files) {\r\n    // create a local readable base64 instance of an image\r\n    this.setState({\r\n      baseImage: files.base64\r\n    });\r\n\r\n    let imageObj = {\r\n      imageName: \"base-image-\" + Date.now(),\r\n      imageData: files.base64.toString()\r\n    };\r\n\r\n    axios.post(`${API_URL}/image/uploadbase`, imageObj)\r\n      .then((data) => {\r\n        if (data.data.success) {\r\n          alert(\"Image has been successfully uploaded using base64 format\");\r\n          this.setDefaultImage(\"base\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        alert(\"Error while uploading image using base64 format\")\r\n        this.setDefaultImage(\"base\");\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <h3 className=\"main-heading\">Image Upload App</h3>\r\n\r\n        <div className=\"image-container\">\r\n          <div className=\"process\">\r\n            <h4 className=\"process__heading\">Process: Using Multer</h4>\r\n            <p className=\"process__details\">Upload image to a node server, connected to a MongoDB database, with the help of multer</p>\r\n\r\n            <input type=\"file\" className=\"process__upload-btn\" onChange={(e) => this.uploadImage(e, \"multer\")} />\r\n            <img src={this.state.multerImage} alt=\"upload-image\" className=\"process__image\" />\r\n          </div>\r\n            <h4 className=\"process__heading\">Process: Using Base64</h4>\r\n            <p className=\"process__details\">Upload image as Base64 directly to MongoDB database</p>\r\n\r\n            <div className=\"process__upload-btn\">\r\n              <FileBase type=\"file\" multiple={false} onDone={this.getBaseFile.bind(this)} />\r\n            </div>\r\n            <img src={this.state.baseImage} alt=\"upload-image\" className=\"process__image\" />\r\n        </div>\r\n\r\n        <p className=\"main-credit\">Created by <a href=\"#\">Tarique Ejaz</a></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}